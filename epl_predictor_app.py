# -*- coding: utf-8 -*-
"""epl_predictor_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wSvr6GCtA3nwrfy0IE3YuMPoSi47ygA2
"""

!pip install streamlit

!pip install catboost

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from catboost import CatBoostRegressor
import gdown

# Download the dataset from Google Drive
file_id = "1YxbJabWmRSeBKCLj-AOsEKZAcpOoPdDl"
output = "EPL_Enhanced_Dataset.csv"
gdown.download(f"https://drive.google.com/uc?id={file_id}", output, quiet=False)

# Load the dataset
df = pd.read_csv("EPL_Enhanced_Dataset.csv")

# Prepare dropdowns
teams = sorted(df['HomeTeam'].unique())
referees = sorted(df['Referee'].dropna().unique())

st.title("Premier League Match Outcome Predictor")

home_team = st.selectbox("Select Home Team", teams)
away_team = st.selectbox("Select Away Team", [t for t in teams if t != home_team])
referee = st.selectbox("Select Referee", referees)

if st.button("Predict Result"):
    # Filter past data to compute rolling stats
    recent_home = df[(df['HomeTeam'] == home_team) | (df['AwayTeam'] == home_team)].sort_values('Date').tail(5)
    recent_away = df[(df['HomeTeam'] == away_team) | (df['AwayTeam'] == away_team)].sort_values('Date').tail(5)
    h2h = df[((df['HomeTeam'] == home_team) & (df['AwayTeam'] == away_team)) |
             ((df['HomeTeam'] == away_team) & (df['AwayTeam'] == home_team))].sort_values('Date').tail(5)

    # Feature calculations
    def avg_goals(df, team, home=True):
        if df.empty: return 0
        goals = []
        for _, row in df.iterrows():
            if row['HomeTeam'] == team:
                goals.append(row['FTHG'])
            else:
                goals.append(row['FTAG'])
        return np.mean(goals) if goals else 0

    def avg_conceded(df, team):
        if df.empty: return 0
        goals = []
        for _, row in df.iterrows():
            if row['HomeTeam'] == team:
                goals.append(row['FTAG'])
            else:
                goals.append(row['FTHG'])
        return np.mean(goals) if goals else 0

    home_recent_goals = avg_goals(recent_home, home_team)
    away_recent_goals = avg_goals(recent_away, away_team)
    home_conceded = avg_conceded(recent_home, home_team)
    away_conceded = avg_conceded(recent_away, away_team)

    h2h_goal_diff = 0
    if not h2h.empty:
        for _, row in h2h.iterrows():
            if row['HomeTeam'] == home_team:
                h2h_goal_diff += row['FTHG'] - row['FTAG']
            else:
                h2h_goal_diff += row['FTAG'] - row['FTHG']
        h2h_goal_diff /= len(h2h)

    ref_stats = df[df['Referee'] == referee][['HY', 'AY', 'HR', 'AR']].mean()

    input_data = pd.DataFrame({
        'Home_RecentGoals': [home_recent_goals],
        'Away_RecentGoals': [away_recent_goals],
        'Home_ConcededGoals': [home_conceded],
        'Away_ConcededGoals': [away_conceded],
        'HeadToHead_GoalDiff': [h2h_goal_diff],
        'Ref_Home_YellowAvg': [ref_stats['HY']],
        'Ref_Away_YellowAvg': [ref_stats['AY']],
        'Ref_Home_RedAvg': [ref_stats['HR']],
        'Ref_Away_RedAvg': [ref_stats['AR']]
    })

    # Define features to train models
    feature_cols = [
        'Home_RecentGoals', 'Away_RecentGoals',
        'Home_ConcededGoals', 'Away_ConcededGoals',
        'HeadToHead_GoalDiff',
        'Ref_Home_YellowAvg', 'Ref_Away_YellowAvg',
        'Ref_Home_RedAvg', 'Ref_Away_RedAvg'
    ]

    # Load or define models
    model_targets = ['FTHG', 'FTAG', 'HY', 'AY', 'HR', 'AR']
    predictions = {}
    for target in model_targets:
        model = CatBoostRegressor(verbose=0, random_seed=42)
        model.fit(df[feature_cols], df[target])
        predictions[target] = model.predict(input_data)[0]

    # Display predictions
    st.subheader("Predicted Match Stats")
    st.write(f"üèüÔ∏è Final Score: {home_team} {predictions['FTHG']:.1f} - {predictions['FTAG']:.1f} {away_team}")
    st.write(f"üü® Yellow Cards - {home_team}: {predictions['HY']:.1f}, {away_team}: {predictions['AY']:.1f}")
    st.write(f"üü• Red Cards - {home_team}: {predictions['HR']:.1f}, {away_team}: {predictions['AR']:.1f}")